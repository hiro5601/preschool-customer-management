{"ast":null,"code":"class PhotoService{constructor(){this.STORAGE_KEY='pet_photos';this.MAX_PHOTOS_PER_CUSTOMER=50;this.MAX_FILE_SIZE=5*1024*1024;}// 5MB (スマホ撮影サイズ)\n// 全写真を取得\ngetAllPhotos(){try{const stored=localStorage.getItem(this.STORAGE_KEY);return stored?JSON.parse(stored):[];}catch(error){console.error('写真データの読み込みエラー:',error);return[];}}// 特定の顧客の写真を取得\ngetPhotosByCustomerId(customerId){const allPhotos=this.getAllPhotos();return allPhotos.filter(photo=>photo.customerId===customerId);}// 写真をアップロード\nasync uploadPhoto(customerId,file,description){try{// ファイルサイズチェック\nif(file.size>this.MAX_FILE_SIZE){return{success:false,error:\"\\u30D5\\u30A1\\u30A4\\u30EB\\u30B5\\u30A4\\u30BA\\u304C\\u5927\\u304D\\u3059\\u304E\\u307E\\u3059\\u3002\\u6700\\u5927\".concat(this.MAX_FILE_SIZE/(1024*1024),\"MB\\u307E\\u3067\\u3067\\u3059\\u3002\")};}// 顧客の写真数をチェック\nconst customerPhotos=this.getPhotosByCustomerId(customerId);if(customerPhotos.length>=this.MAX_PHOTOS_PER_CUSTOMER){return{success:false,error:\"1\\u9867\\u5BA2\\u3042\\u305F\\u308A\\u6700\\u5927\".concat(this.MAX_PHOTOS_PER_CUSTOMER,\"\\u679A\\u307E\\u3067\\u3067\\u3059\\u3002\")};}// ファイルをBase64に変換\nconst dataUrl=await this.fileToDataUrl(file);// 写真オブジェクトを作成\nconst photo={id:\"photo_\".concat(Date.now(),\"_\").concat(Math.random().toString(36).substr(2,9)),customerId,fileName:file.name,dataUrl,fileSize:file.size,uploadedAt:new Date().toISOString(),description};// ローカルストレージに保存\nconst allPhotos=this.getAllPhotos();allPhotos.push(photo);localStorage.setItem(this.STORAGE_KEY,JSON.stringify(allPhotos));return{success:true,photo};}catch(error){console.error('写真アップロードエラー:',error);return{success:false,error:'写真のアップロードに失敗しました。'};}}// 写真を削除\ndeletePhoto(photoId){try{const allPhotos=this.getAllPhotos();const filteredPhotos=allPhotos.filter(photo=>photo.id!==photoId);if(filteredPhotos.length===allPhotos.length){return false;// 写真が見つからない\n}localStorage.setItem(this.STORAGE_KEY,JSON.stringify(filteredPhotos));return true;}catch(error){console.error('写真削除エラー:',error);return false;}}// 顧客の全写真を削除\ndeletePhotosByCustomerId(customerId){try{const allPhotos=this.getAllPhotos();const filteredPhotos=allPhotos.filter(photo=>photo.customerId!==customerId);const deletedCount=allPhotos.length-filteredPhotos.length;localStorage.setItem(this.STORAGE_KEY,JSON.stringify(filteredPhotos));return deletedCount;}catch(error){console.error('顧客写真一括削除エラー:',error);return 0;}}// ファイルをBase64に変換\nfileToDataUrl(file){return new Promise((resolve,reject)=>{const reader=new FileReader();reader.onload=()=>resolve(reader.result);reader.onerror=reject;reader.readAsDataURL(file);});}// ストレージ使用量を取得（MB単位）\ngetStorageUsage(){try{const stored=localStorage.getItem(this.STORAGE_KEY);if(!stored)return 0;const photos=JSON.parse(stored);const totalSize=photos.reduce((sum,photo)=>sum+photo.fileSize,0);return totalSize/(1024*1024);// MB単位\n}catch(error){console.error('ストレージ使用量計算エラー:',error);return 0;}}// ストレージをクリア（全写真削除）\nclearAllPhotos(){try{localStorage.removeItem(this.STORAGE_KEY);return true;}catch(error){console.error('全写真削除エラー:',error);return false;}}// 写真の詳細を更新\nupdatePhotoDescription(photoId,description){try{const allPhotos=this.getAllPhotos();const photoIndex=allPhotos.findIndex(photo=>photo.id===photoId);if(photoIndex===-1)return false;allPhotos[photoIndex].description=description;localStorage.setItem(this.STORAGE_KEY,JSON.stringify(allPhotos));return true;}catch(error){console.error('写真詳細更新エラー:',error);return false;}}}export default PhotoService;","map":{"version":3,"names":["PhotoService","constructor","STORAGE_KEY","MAX_PHOTOS_PER_CUSTOMER","MAX_FILE_SIZE","getAllPhotos","stored","localStorage","getItem","JSON","parse","error","console","getPhotosByCustomerId","customerId","allPhotos","filter","photo","uploadPhoto","file","description","size","success","concat","customerPhotos","length","dataUrl","fileToDataUrl","id","Date","now","Math","random","toString","substr","fileName","name","fileSize","uploadedAt","toISOString","push","setItem","stringify","deletePhoto","photoId","filteredPhotos","deletePhotosByCustomerId","deletedCount","Promise","resolve","reject","reader","FileReader","onload","result","onerror","readAsDataURL","getStorageUsage","photos","totalSize","reduce","sum","clearAllPhotos","removeItem","updatePhotoDescription","photoIndex","findIndex"],"sources":["C:/Users/user/OneDrive/Desktop/preschool_data/src/services/photoService.ts"],"sourcesContent":["import { PetPhoto, PhotoUploadResult } from '../types/customer';\r\n\r\nclass PhotoService {\r\n  private readonly STORAGE_KEY = 'pet_photos';\r\n  private readonly MAX_PHOTOS_PER_CUSTOMER = 50;\r\n  private readonly MAX_FILE_SIZE = 5 * 1024 * 1024; // 5MB (スマホ撮影サイズ)\r\n\r\n  // 全写真を取得\r\n  getAllPhotos(): PetPhoto[] {\r\n    try {\r\n      const stored = localStorage.getItem(this.STORAGE_KEY);\r\n      return stored ? JSON.parse(stored) : [];\r\n    } catch (error) {\r\n      console.error('写真データの読み込みエラー:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  // 特定の顧客の写真を取得\r\n  getPhotosByCustomerId(customerId: string): PetPhoto[] {\r\n    const allPhotos = this.getAllPhotos();\r\n    return allPhotos.filter(photo => photo.customerId === customerId);\r\n  }\r\n\r\n  // 写真をアップロード\r\n  async uploadPhoto(\r\n    customerId: string, \r\n    file: File, \r\n    description?: string\r\n  ): Promise<PhotoUploadResult> {\r\n    try {\r\n      // ファイルサイズチェック\r\n      if (file.size > this.MAX_FILE_SIZE) {\r\n        return {\r\n          success: false,\r\n          error: `ファイルサイズが大きすぎます。最大${this.MAX_FILE_SIZE / (1024 * 1024)}MBまでです。`\r\n        };\r\n      }\r\n\r\n      // 顧客の写真数をチェック\r\n      const customerPhotos = this.getPhotosByCustomerId(customerId);\r\n      if (customerPhotos.length >= this.MAX_PHOTOS_PER_CUSTOMER) {\r\n        return {\r\n          success: false,\r\n          error: `1顧客あたり最大${this.MAX_PHOTOS_PER_CUSTOMER}枚までです。`\r\n        };\r\n      }\r\n\r\n      // ファイルをBase64に変換\r\n      const dataUrl = await this.fileToDataUrl(file);\r\n      \r\n      // 写真オブジェクトを作成\r\n      const photo: PetPhoto = {\r\n        id: `photo_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\r\n        customerId,\r\n        fileName: file.name,\r\n        dataUrl,\r\n        fileSize: file.size,\r\n        uploadedAt: new Date().toISOString(),\r\n        description\r\n      };\r\n\r\n      // ローカルストレージに保存\r\n      const allPhotos = this.getAllPhotos();\r\n      allPhotos.push(photo);\r\n      localStorage.setItem(this.STORAGE_KEY, JSON.stringify(allPhotos));\r\n\r\n      return {\r\n        success: true,\r\n        photo\r\n      };\r\n    } catch (error) {\r\n      console.error('写真アップロードエラー:', error);\r\n      return {\r\n        success: false,\r\n        error: '写真のアップロードに失敗しました。'\r\n      };\r\n    }\r\n  }\r\n\r\n  // 写真を削除\r\n  deletePhoto(photoId: string): boolean {\r\n    try {\r\n      const allPhotos = this.getAllPhotos();\r\n      const filteredPhotos = allPhotos.filter(photo => photo.id !== photoId);\r\n      \r\n      if (filteredPhotos.length === allPhotos.length) {\r\n        return false; // 写真が見つからない\r\n      }\r\n\r\n      localStorage.setItem(this.STORAGE_KEY, JSON.stringify(filteredPhotos));\r\n      return true;\r\n    } catch (error) {\r\n      console.error('写真削除エラー:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // 顧客の全写真を削除\r\n  deletePhotosByCustomerId(customerId: string): number {\r\n    try {\r\n      const allPhotos = this.getAllPhotos();\r\n      const filteredPhotos = allPhotos.filter(photo => photo.customerId !== customerId);\r\n      const deletedCount = allPhotos.length - filteredPhotos.length;\r\n      \r\n      localStorage.setItem(this.STORAGE_KEY, JSON.stringify(filteredPhotos));\r\n      return deletedCount;\r\n    } catch (error) {\r\n      console.error('顧客写真一括削除エラー:', error);\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  // ファイルをBase64に変換\r\n  private fileToDataUrl(file: File): Promise<string> {\r\n    return new Promise((resolve, reject) => {\r\n      const reader = new FileReader();\r\n      reader.onload = () => resolve(reader.result as string);\r\n      reader.onerror = reject;\r\n      reader.readAsDataURL(file);\r\n    });\r\n  }\r\n\r\n  // ストレージ使用量を取得（MB単位）\r\n  getStorageUsage(): number {\r\n    try {\r\n      const stored = localStorage.getItem(this.STORAGE_KEY);\r\n      if (!stored) return 0;\r\n      \r\n      const photos: PetPhoto[] = JSON.parse(stored);\r\n      const totalSize = photos.reduce((sum, photo) => sum + photo.fileSize, 0);\r\n      return totalSize / (1024 * 1024); // MB単位\r\n    } catch (error) {\r\n      console.error('ストレージ使用量計算エラー:', error);\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  // ストレージをクリア（全写真削除）\r\n  clearAllPhotos(): boolean {\r\n    try {\r\n      localStorage.removeItem(this.STORAGE_KEY);\r\n      return true;\r\n    } catch (error) {\r\n      console.error('全写真削除エラー:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // 写真の詳細を更新\r\n  updatePhotoDescription(photoId: string, description: string): boolean {\r\n    try {\r\n      const allPhotos = this.getAllPhotos();\r\n      const photoIndex = allPhotos.findIndex(photo => photo.id === photoId);\r\n      \r\n      if (photoIndex === -1) return false;\r\n      \r\n      allPhotos[photoIndex].description = description;\r\n      localStorage.setItem(this.STORAGE_KEY, JSON.stringify(allPhotos));\r\n      return true;\r\n    } catch (error) {\r\n      console.error('写真詳細更新エラー:', error);\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\nexport default PhotoService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}