{"ast":null,"code":"import _objectSpread from\"C:/Users/user/OneDrive/Desktop/preschool_data/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";const API_BASE_URL=process.env.REACT_APP_API_URL||'http://localhost:3001/api';class ApiService{async request(endpoint){let options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};const url=\"\".concat(API_BASE_URL).concat(endpoint);const response=await fetch(url,_objectSpread({headers:_objectSpread({'Content-Type':'application/json'},options.headers)},options));if(!response.ok){const errorData=await response.json().catch(()=>({}));throw new Error(errorData.error||\"HTTP error! status: \".concat(response.status));}return response.json();}// 顧客一覧取得\nasync getCustomers(){return this.request('/customers');}// 顧客詳細取得\nasync getCustomerById(id){try{return await this.request(\"/customers/\".concat(id));}catch(error){if(error instanceof Error&&error.message.includes('404')){return null;}throw error;}}// 顧客作成\nasync createCustomer(customerData){return this.request('/customers',{method:'POST',body:JSON.stringify(customerData)});}// 顧客更新\nasync updateCustomer(id,customerData){return this.request(\"/customers/\".concat(id),{method:'PUT',body:JSON.stringify(customerData)});}// 顧客削除\nasync deleteCustomer(id){await this.request(\"/customers/\".concat(id),{method:'DELETE'});}// ヘルスチェック\nasync healthCheck(){return this.request('/health');}}export default new ApiService();","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","ApiService","request","endpoint","options","arguments","length","undefined","url","concat","response","fetch","_objectSpread","headers","ok","errorData","json","catch","Error","error","status","getCustomers","getCustomerById","id","message","includes","createCustomer","customerData","method","body","JSON","stringify","updateCustomer","deleteCustomer","healthCheck"],"sources":["C:/Users/user/OneDrive/Desktop/preschool_data/src/services/apiService.ts"],"sourcesContent":["import { CustomerData } from '../types/customer';\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';\r\n\r\nclass ApiService {\r\n  private async request<T>(endpoint: string, options: RequestInit = {}): Promise<T> {\r\n    const url = `${API_BASE_URL}${endpoint}`;\r\n    \r\n    const response = await fetch(url, {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        ...options.headers,\r\n      },\r\n      ...options,\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorData = await response.json().catch(() => ({}));\r\n      throw new Error(errorData.error || `HTTP error! status: ${response.status}`);\r\n    }\r\n\r\n    return response.json();\r\n  }\r\n\r\n  // 顧客一覧取得\r\n  async getCustomers(): Promise<CustomerData[]> {\r\n    return this.request<CustomerData[]>('/customers');\r\n  }\r\n\r\n  // 顧客詳細取得\r\n  async getCustomerById(id: string): Promise<CustomerData | null> {\r\n    try {\r\n      return await this.request<CustomerData>(`/customers/${id}`);\r\n    } catch (error) {\r\n      if (error instanceof Error && error.message.includes('404')) {\r\n        return null;\r\n      }\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // 顧客作成\r\n  async createCustomer(customerData: Omit<CustomerData, 'id'>): Promise<CustomerData> {\r\n    return this.request<CustomerData>('/customers', {\r\n      method: 'POST',\r\n      body: JSON.stringify(customerData),\r\n    });\r\n  }\r\n\r\n  // 顧客更新\r\n  async updateCustomer(id: string, customerData: Partial<CustomerData>): Promise<CustomerData> {\r\n    return this.request<CustomerData>(`/customers/${id}`, {\r\n      method: 'PUT',\r\n      body: JSON.stringify(customerData),\r\n    });\r\n  }\r\n\r\n  // 顧客削除\r\n  async deleteCustomer(id: string): Promise<void> {\r\n    await this.request<void>(`/customers/${id}`, {\r\n      method: 'DELETE',\r\n    });\r\n  }\r\n\r\n  // ヘルスチェック\r\n  async healthCheck(): Promise<{ status: string; timestamp: string }> {\r\n    return this.request<{ status: string; timestamp: string }>('/health');\r\n  }\r\n}\r\n\r\nexport default new ApiService();\r\n"],"mappings":"kIAEA,KAAM,CAAAA,YAAY,CAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,EAAI,2BAA2B,CAEjF,KAAM,CAAAC,UAAW,CACf,KAAc,CAAAC,OAAOA,CAAIC,QAAgB,CAAyC,IAAvC,CAAAC,OAAoB,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,CAAC,CAAC,CAClE,KAAM,CAAAG,GAAG,IAAAC,MAAA,CAAMZ,YAAY,EAAAY,MAAA,CAAGN,QAAQ,CAAE,CAExC,KAAM,CAAAO,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAACH,GAAG,CAAAI,aAAA,EAC9BC,OAAO,CAAAD,aAAA,EACL,cAAc,CAAE,kBAAkB,EAC/BR,OAAO,CAACS,OAAO,CACnB,EACET,OAAO,CACX,CAAC,CAEF,GAAI,CAACM,QAAQ,CAACI,EAAE,CAAE,CAChB,KAAM,CAAAC,SAAS,CAAG,KAAM,CAAAL,QAAQ,CAACM,IAAI,CAAC,CAAC,CAACC,KAAK,CAAC,KAAO,CAAC,CAAC,CAAC,CAAC,CACzD,KAAM,IAAI,CAAAC,KAAK,CAACH,SAAS,CAACI,KAAK,yBAAAV,MAAA,CAA2BC,QAAQ,CAACU,MAAM,CAAE,CAAC,CAC9E,CAEA,MAAO,CAAAV,QAAQ,CAACM,IAAI,CAAC,CAAC,CACxB,CAEA;AACA,KAAM,CAAAK,YAAYA,CAAA,CAA4B,CAC5C,MAAO,KAAI,CAACnB,OAAO,CAAiB,YAAY,CAAC,CACnD,CAEA;AACA,KAAM,CAAAoB,eAAeA,CAACC,EAAU,CAAgC,CAC9D,GAAI,CACF,MAAO,MAAM,KAAI,CAACrB,OAAO,eAAAO,MAAA,CAA6Bc,EAAE,CAAE,CAAC,CAC7D,CAAE,MAAOJ,KAAK,CAAE,CACd,GAAIA,KAAK,WAAY,CAAAD,KAAK,EAAIC,KAAK,CAACK,OAAO,CAACC,QAAQ,CAAC,KAAK,CAAC,CAAE,CAC3D,MAAO,KAAI,CACb,CACA,KAAM,CAAAN,KAAK,CACb,CACF,CAEA;AACA,KAAM,CAAAO,cAAcA,CAACC,YAAsC,CAAyB,CAClF,MAAO,KAAI,CAACzB,OAAO,CAAe,YAAY,CAAE,CAC9C0B,MAAM,CAAE,MAAM,CACdC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAACJ,YAAY,CACnC,CAAC,CAAC,CACJ,CAEA;AACA,KAAM,CAAAK,cAAcA,CAACT,EAAU,CAAEI,YAAmC,CAAyB,CAC3F,MAAO,KAAI,CAACzB,OAAO,eAAAO,MAAA,CAA6Bc,EAAE,EAAI,CACpDK,MAAM,CAAE,KAAK,CACbC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAACJ,YAAY,CACnC,CAAC,CAAC,CACJ,CAEA;AACA,KAAM,CAAAM,cAAcA,CAACV,EAAU,CAAiB,CAC9C,KAAM,KAAI,CAACrB,OAAO,eAAAO,MAAA,CAAqBc,EAAE,EAAI,CAC3CK,MAAM,CAAE,QACV,CAAC,CAAC,CACJ,CAEA;AACA,KAAM,CAAAM,WAAWA,CAAA,CAAmD,CAClE,MAAO,KAAI,CAAChC,OAAO,CAAwC,SAAS,CAAC,CACvE,CACF,CAEA,cAAe,IAAI,CAAAD,UAAU,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}