{"ast":null,"code":"// Google API の型定義\nclass GoogleSheetsService{// 1秒間隔でAPI呼び出し\nconstructor(){this.spreadsheetId=void 0;this.apiKey=void 0;this.clientEmail=void 0;this.privateKey=void 0;this.gapi=void 0;// Google API インスタンス\n// キャッシュ機能を削除（都度取得に変更）\nthis.MAX_RETRIES=3;// リトライ回数を増加\nthis.RETRY_DELAY=2000;// 2秒待機に短縮\nthis.lastApiCall=0;this.MIN_API_INTERVAL=1000;this.spreadsheetId=(process.env.REACT_APP_SPREADSHEET_ID||'').trim();this.apiKey=(process.env.REACT_APP_GOOGLE_API_KEY||'').trim();this.clientEmail=(process.env.REACT_APP_GOOGLE_CLIENT_EMAIL||'').trim();this.privateKey=(process.env.REACT_APP_GOOGLE_PRIVATE_KEY||'').trim();}async getCustomers(){// 本番環境では常にGoogle Sheets APIから最新データを取得\nif(process.env.NODE_ENV==='production'&&this.spreadsheetId&&this.apiKey){try{console.log('Google Sheetsから最新データを取得中...');const data=await this.fetchFromGoogleSheetsWithRetry();// ローカルストレージに保存（同期のため）\nthis.saveLocalCustomers(data);console.log('Google Sheetsから取得完了:',data.length,'件');return data;}catch(error){console.error('Google Sheets API エラー:',error);// エラーの場合はローカルストレージから取得\nconst localData=this.getLocalCustomers();if(localData.length>0){console.log('エラーのためローカルストレージから取得:',localData.length,'件');return localData;}console.log('ローカルストレージも空のため、空の配列を返します');return[];}}// 開発環境でもGoogle Sheetsから取得\nreturn await this.fetchFromGoogleSheetsWithRetry();}async fetchFromGoogleSheetsWithRetry(){// API呼び出し間隔を制御\nconst timeSinceLastCall=Date.now()-this.lastApiCall;if(timeSinceLastCall<this.MIN_API_INTERVAL){const waitTime=this.MIN_API_INTERVAL-timeSinceLastCall;console.log(\"\".concat(waitTime,\"ms \\u5F85\\u6A5F\\u3057\\u3066\\u304B\\u3089API\\u547C\\u3073\\u51FA\\u3057...\"));await this.sleep(waitTime);}for(let attempt=1;attempt<=this.MAX_RETRIES;attempt++){try{console.log(\"Google Sheets API \\u547C\\u3073\\u51FA\\u3057 (\\u8A66\\u884C \".concat(attempt,\"/\").concat(this.MAX_RETRIES,\")\"));this.lastApiCall=Date.now();return await this.fetchFromGoogleSheets();}catch(error){console.error(\"\\u8A66\\u884C \".concat(attempt,\" \\u5931\\u6557:\"),error);// レート制限エラーの場合、待機時間を増やす\nif(error.message.includes('429')||error.message.includes('RATE_LIMIT_EXCEEDED')){const delay=this.RETRY_DELAY*Math.pow(2,attempt-1);// 指数バックオフ\nconsole.log(\"\".concat(delay,\"ms \\u5F85\\u6A5F\\u3057\\u3066\\u304B\\u3089\\u518D\\u8A66\\u884C...\"));await this.sleep(delay);continue;}// 最後の試行でも失敗した場合、ローカルストレージから取得\nif(attempt===this.MAX_RETRIES){console.log('Google Sheets API が利用できないため、ローカルストレージから取得します');const localData=this.getLocalCustomers();if(localData.length>0){return localData;}// ローカルストレージも空の場合は空の配列を返す\nreturn[];}// その他のエラーは即座に失敗\nthrow error;}}throw new Error('最大リトライ回数に達しました');}sleep(ms){return new Promise(resolve=>setTimeout(resolve,ms));}// Google API を初期化\nasync initializeGapi(){return new Promise((resolve,reject)=>{if(typeof window==='undefined'){reject(new Error('ブラウザ環境で実行してください'));return;}// Google API スクリプトが既に読み込まれているかチェック\nif(window.gapi){this.gapi=window.gapi;resolve();return;}// Google API スクリプトを動的に読み込み\nconst script=document.createElement('script');script.src='https://apis.google.com/js/api.js';script.onload=()=>{window.gapi.load('client',async()=>{try{await window.gapi.client.init({apiKey:this.apiKey,discoveryDocs:['https://sheets.googleapis.com/$discovery/rest?version=v4']});this.gapi=window.gapi;resolve();}catch(error){reject(error);}});};script.onerror=()=>reject(new Error('Google API スクリプトの読み込みに失敗しました'));document.head.appendChild(script);});}// サービスアカウント認証でJWTトークンを取得\nasync getServiceAccountToken(){try{const now=Math.floor(Date.now()/1000);const header={alg:'RS256',typ:'JWT'};const payload={iss:this.clientEmail,scope:'https://www.googleapis.com/auth/spreadsheets',aud:'https://oauth2.googleapis.com/token',iat:now,exp:now+3600,// 1時間有効\nsub:this.clientEmail};// JWTトークンを生成（簡略化された実装）\nconst encodedHeader=btoa(JSON.stringify(header));const encodedPayload=btoa(JSON.stringify(payload));const signature=await this.signJWT(\"\".concat(encodedHeader,\".\").concat(encodedPayload));return\"\".concat(encodedHeader,\".\").concat(encodedPayload,\".\").concat(signature);}catch(error){console.error('JWTトークン生成エラー:',error);throw error;}}// JWT署名を生成（簡略化）\nasync signJWT(data){// 実際の実装では、Web Crypto APIを使用してRS256署名を生成する必要があります\n// ここでは簡略化のため、空の文字列を返します\nconsole.warn('JWT署名の実装が必要です');return'';}async fetchFromGoogleSheets(){try{console.log('Google Sheets API 設定:',{spreadsheetId:this.spreadsheetId,apiKey:this.apiKey?'設定済み':'未設定',environment:process.env.NODE_ENV});// 一般公開されたスプレッドシートにAPIキーでアクセス\n// まず、スプレッドシートの情報を取得してシート名を確認\nconst spreadsheetInfoUrl=\"https://sheets.googleapis.com/v4/spreadsheets/\".concat(this.spreadsheetId.trim(),\"?key=\").concat(this.apiKey);console.log('スプレッドシート情報取得URL:',spreadsheetInfoUrl);const infoResponse=await fetch(spreadsheetInfoUrl);if(!infoResponse.ok){throw new Error(\"Spreadsheet info request failed: \".concat(infoResponse.status));}const spreadsheetInfo=await infoResponse.json();console.log('スプレッドシート情報:',spreadsheetInfo);// 「フォームの回答」シートを取得\nconst sheetName='フォームの回答';console.log('使用するシート名:',sheetName);const url=\"https://sheets.googleapis.com/v4/spreadsheets/\".concat(this.spreadsheetId.trim(),\"/values/\").concat(encodeURIComponent(sheetName),\"?key=\").concat(this.apiKey);console.log('API URL:',url);const response=await fetch(url);console.log('API レスポンス:',{status:response.status,statusText:response.statusText,ok:response.ok});if(!response.ok){const errorText=await response.text();console.error('API エラーレスポンス:',errorText);throw new Error(\"HTTP error! status: \".concat(response.status,\", message: \").concat(errorText));}const data=await response.json();console.log('取得したデータ:',data);const parsedData=this.parseSheetData(data.values||[]);console.log('解析されたデータ:',parsedData);return parsedData;}catch(error){console.error('Google Sheets データ取得エラー:',error);throw error;}}parseSheetData(values){if(values.length<2){return[];}// ヘッダー行をスキップしてデータを解析\nconst headers=values[0];const dataRows=values.slice(1);console.log('ヘッダー:',headers);console.log('データ行数:',dataRows.length);return dataRows.map((row,index)=>{console.log(\"\\u884C \".concat(index+1,\":\"),row);// ヘッダーに基づいてデータをマッピング\nconst getValue=headerName=>{const headerIndex=headers.findIndex(h=>h&&h.toLowerCase().includes(headerName.toLowerCase()));return headerIndex>=0?(row[headerIndex]||'').trim():'';};// フォーム回答の列構造に基づいてデータを解析\n// フォーム回答の列順序: タイムスタンプ, お名前, ふりがな, メール, 電話, 住所, ペット名, 犬種, 年齢, 体重, 備考, 登録日, 最終来店\nconst customer={id:\"C\".concat(String(index+1).padStart(3,'0')),// 管理システム側で自動付与\nname:row[1]||'',// お名前（B列）\nfurigana:row[2]||'',// ふりがな（C列）\nemail:row[3]||'',// メール（D列）\nphone:row[4]||'',// 電話（E列）\naddress:row[5]||'',// 住所（F列）\npetName:row[6]||'',// ペット名（G列）\npetType:row[7]||'その他',// 犬種（H列）\nbreed:'',// 品種は削除\nage:parseInt(row[8]||'0')||0,// 年齢（I列）\nweight:parseFloat(row[9]||'0')||0,// 体重（J列）\nimageUrl:'',// 画像URLは削除\nnotes:row[10]||'',// 備考（K列）\ncreatedAt:row[11]||new Date().toISOString().split('T')[0],// 登録日（L列）\nlastVisit:row[12]||'',// 最終来店（M列）\nstatus:'active'// デフォルトでアクティブ\n};console.log(\"\\u89E3\\u6790\\u3055\\u308C\\u305F\\u9867\\u5BA2 \".concat(index+1,\":\"),customer);return customer;}).filter(customer=>customer.name&&customer.petName);// 名前とペット名があるもののみ\n}async getCustomerById(id){const customers=await this.getCustomers();return customers.find(customer=>customer.id===id)||null;}// ローカルストレージから顧客データを取得\ngetLocalCustomers(){try{const stored=localStorage.getItem('かんりしすてむpreschool_customers');if(stored){const data=JSON.parse(stored);console.log('ローカルストレージから取得したデータ:',data);return data;}}catch(error){console.error('ローカルストレージからのデータ取得エラー:',error);}return[];}// ローカルストレージに顧客データを保存\nsaveLocalCustomers(customers){try{localStorage.setItem('かんりしすてむpreschool_customers',JSON.stringify(customers));console.log('ローカルストレージに保存:',customers.length,'件');}catch(error){console.error('ローカルストレージへの保存エラー:',error);}}// ローカルストレージをクリア\nclearLocalData(){try{localStorage.removeItem('かんりしすてむpreschool_customers');console.log('ローカルストレージをクリアしました');}catch(error){console.error('ローカルストレージのクリアエラー:',error);}}// 特定の顧客データを削除（ローカルストレージのみ）\ndeleteCustomer(id){try{const customers=this.getLocalCustomers();const updatedCustomers=customers.filter(customer=>customer.id!==id);this.saveLocalCustomers(updatedCustomers);console.log(\"\\u9867\\u5BA2ID \".concat(id,\" \\u3092\\u30ED\\u30FC\\u30AB\\u30EB\\u30B9\\u30C8\\u30EC\\u30FC\\u30B8\\u304B\\u3089\\u524A\\u9664\\u3057\\u307E\\u3057\\u305F\"));}catch(error){console.error('顧客データの削除エラー:',error);}}// 顧客データを更新（ローカルストレージとGoogle Sheets両方）\nasync updateCustomer(updatedCustomer){try{// ローカルストレージを更新\nconst customers=this.getLocalCustomers();const customerIndex=customers.findIndex(c=>c.id===updatedCustomer.id);if(customerIndex===-1){throw new Error('顧客が見つかりません');}customers[customerIndex]=updatedCustomer;this.saveLocalCustomers(customers);console.log(\"\\u9867\\u5BA2ID \".concat(updatedCustomer.id,\" \\u3092\\u30ED\\u30FC\\u30AB\\u30EB\\u30B9\\u30C8\\u30EC\\u30FC\\u30B8\\u3067\\u66F4\\u65B0\\u3057\\u307E\\u3057\\u305F\"));// 本番環境の場合、Google Sheetsも更新\nif(process.env.NODE_ENV==='production'){await this.updateCustomerInSheets(updatedCustomer);}}catch(error){console.error('顧客データの更新エラー:',error);throw error;}}// Google Sheetsで顧客データを更新\nasync updateCustomerInSheets(customer){try{// 顧客データを取得して行番号を特定\nconst customers=await this.getCustomers();const customerIndex=customers.findIndex(c=>c.id===customer.id);if(customerIndex===-1){throw new Error('顧客が見つかりません');}// 行番号を計算（ヘッダー行を考慮して+2）\nconst rowNumber=customerIndex+2;// データをGoogle Sheetsの形式に変換（フォーム回答用）\nconst rowData=['',// タイムスタンプ（A列）- 更新時は空\ncustomer.name,// お名前（B列）\ncustomer.furigana||'',// ふりがな（C列）\ncustomer.email,// メール（D列）\ncustomer.phone,// 電話（E列）\ncustomer.address,// 住所（F列）\ncustomer.petName,// ペット名（G列）\ncustomer.petType,// 犬種（H列）\ncustomer.age,// 年齢（I列）\ncustomer.weight,// 体重（J列）\ncustomer.notes,// 備考（K列）\ncustomer.createdAt,// 登録日（L列）\ncustomer.lastVisit// 最終来店（M列）\n];// 行を更新\nconst requestBody={values:[rowData]};const response=await fetch(\"https://sheets.googleapis.com/v4/spreadsheets/\".concat(this.spreadsheetId,\"/values/A\").concat(rowNumber,\":M\").concat(rowNumber,\"?valueInputOption=RAW&key=\").concat(this.apiKey),{method:'PUT',headers:{'Content-Type':'application/json'},body:JSON.stringify(requestBody)});if(!response.ok){const errorData=await response.json();throw new Error(\"Google Sheets API \\u30A8\\u30E9\\u30FC: \".concat(response.status,\" - \").concat(JSON.stringify(errorData)));}console.log(\"\\u9867\\u5BA2 \".concat(customer.id,\" \\u3092Google Sheets\\u3067\\u66F4\\u65B0\\u3057\\u307E\\u3057\\u305F\"));}catch(error){console.error('Google Sheetsでの更新に失敗しました:',error);throw error;}}// Google Sheetsから顧客を削除（fetch APIを使用）\nasync deleteCustomerFromSheets(id){try{// 顧客データを取得して行番号を特定\nconst customers=await this.getCustomers();const customerIndex=customers.findIndex(c=>c.id===id);if(customerIndex===-1){throw new Error('顧客が見つかりません');}// 行番号を計算（ヘッダー行を考慮して+2）\nconst rowNumber=customerIndex+2;// サービスアカウント認証でJWTトークンを取得\nconst token=await this.getServiceAccountToken();// アクセストークンを取得\nconst accessToken=await this.getAccessToken(token);// 行を削除\nconst requestBody={requests:[{deleteDimension:{range:{sheetId:0,dimension:'ROWS',startIndex:rowNumber-1,endIndex:rowNumber}}}]};const response=await fetch(\"https://sheets.googleapis.com/v4/spreadsheets/\".concat(this.spreadsheetId,\":batchUpdate?key=\").concat(this.apiKey),{method:'POST',headers:{'Authorization':\"Bearer \".concat(accessToken),'Content-Type':'application/json'},body:JSON.stringify(requestBody)});if(!response.ok){const errorData=await response.json();throw new Error(\"Google Sheets API \\u30A8\\u30E9\\u30FC: \".concat(response.status,\" - \").concat(JSON.stringify(errorData)));}console.log(\"\\u9867\\u5BA2 \".concat(id,\" \\u3092Google Sheets\\u304B\\u3089\\u524A\\u9664\\u3057\\u307E\\u3057\\u305F\"));}catch(error){console.error('Google Sheetsからの削除に失敗しました:',error);throw error;}}// アクセストークンを取得\nasync getAccessToken(jwtToken){const response=await fetch('https://oauth2.googleapis.com/token',{method:'POST',headers:{'Content-Type':'application/x-www-form-urlencoded'},body:new URLSearchParams({grant_type:'urn:ietf:params:oauth:grant-type:jwt-bearer',assertion:jwtToken})});if(!response.ok){throw new Error(\"\\u30A2\\u30AF\\u30BB\\u30B9\\u30C8\\u30FC\\u30AF\\u30F3\\u53D6\\u5F97\\u30A8\\u30E9\\u30FC: \".concat(response.status));}const data=await response.json();return data.access_token;}// 顧客を完全に削除（現在はローカルストレージのみ）\nasync deleteCustomerCompletely(id){try{// ローカルストレージから削除\nthis.deleteCustomer(id);// TODO: Google Sheetsからの削除は認証の問題で一時的に無効化\n// サービスアカウント認証の実装が必要\nconsole.log(\"\\u9867\\u5BA2 \".concat(id,\" \\u3092\\u30ED\\u30FC\\u30AB\\u30EB\\u30B9\\u30C8\\u30EC\\u30FC\\u30B8\\u304B\\u3089\\u524A\\u9664\\u3057\\u307E\\u3057\\u305F\"));console.log('注意: Google Sheetsからの削除は現在無効です');// 将来的にGoogle Sheetsからも削除する場合のコード\n// if (process.env.NODE_ENV === 'production') {\n//   await this.deleteCustomerFromSheets(id);\n// }\n}catch(error){console.error('顧客の削除に失敗しました:',error);throw error;}}// スプレッドシートからデータを再取得してローカルに保存\nasync refreshFromSheets(){console.log('スプレッドシートからデータを再取得します...');return await this.getCustomers();}}export default GoogleSheetsService;","map":{"version":3,"names":["GoogleSheetsService","constructor","spreadsheetId","apiKey","clientEmail","privateKey","gapi","MAX_RETRIES","RETRY_DELAY","lastApiCall","MIN_API_INTERVAL","process","env","REACT_APP_SPREADSHEET_ID","trim","REACT_APP_GOOGLE_API_KEY","REACT_APP_GOOGLE_CLIENT_EMAIL","REACT_APP_GOOGLE_PRIVATE_KEY","getCustomers","NODE_ENV","console","log","data","fetchFromGoogleSheetsWithRetry","saveLocalCustomers","length","error","localData","getLocalCustomers","timeSinceLastCall","Date","now","waitTime","concat","sleep","attempt","fetchFromGoogleSheets","message","includes","delay","Math","pow","Error","ms","Promise","resolve","setTimeout","initializeGapi","reject","window","script","document","createElement","src","onload","load","client","init","discoveryDocs","onerror","head","appendChild","getServiceAccountToken","floor","header","alg","typ","payload","iss","scope","aud","iat","exp","sub","encodedHeader","btoa","JSON","stringify","encodedPayload","signature","signJWT","warn","environment","spreadsheetInfoUrl","infoResponse","fetch","ok","status","spreadsheetInfo","json","sheetName","url","encodeURIComponent","response","statusText","errorText","text","parsedData","parseSheetData","values","headers","dataRows","slice","map","row","index","getValue","headerName","headerIndex","findIndex","h","toLowerCase","customer","id","String","padStart","name","furigana","email","phone","address","petName","petType","breed","age","parseInt","weight","parseFloat","imageUrl","notes","createdAt","toISOString","split","lastVisit","filter","getCustomerById","customers","find","stored","localStorage","getItem","parse","setItem","clearLocalData","removeItem","deleteCustomer","updatedCustomers","updateCustomer","updatedCustomer","customerIndex","c","updateCustomerInSheets","rowNumber","rowData","requestBody","method","body","errorData","deleteCustomerFromSheets","token","accessToken","getAccessToken","requests","deleteDimension","range","sheetId","dimension","startIndex","endIndex","jwtToken","URLSearchParams","grant_type","assertion","access_token","deleteCustomerCompletely","refreshFromSheets"],"sources":["C:/Users/user/OneDrive/Desktop/preschool_data/src/services/googleSheetsApi.ts"],"sourcesContent":["import { CustomerData } from '../types/customer';\n\n// Google API の型定義\ndeclare global {\n  interface Window {\n    gapi: any;\n  }\n}\n\nclass GoogleSheetsService {\n  private spreadsheetId: string;\n  private apiKey: string;\n  private clientEmail: string;\n  private privateKey: string;\n  private gapi: any; // Google API インスタンス\n  // キャッシュ機能を削除（都度取得に変更）\n  private readonly MAX_RETRIES = 3; // リトライ回数を増加\n  private readonly RETRY_DELAY = 2000; // 2秒待機に短縮\n  private lastApiCall: number = 0;\n  private readonly MIN_API_INTERVAL = 1000; // 1秒間隔でAPI呼び出し\n\n  constructor() {\n    this.spreadsheetId = (process.env.REACT_APP_SPREADSHEET_ID || '').trim();\n    this.apiKey = (process.env.REACT_APP_GOOGLE_API_KEY || '').trim();\n    this.clientEmail = (process.env.REACT_APP_GOOGLE_CLIENT_EMAIL || '').trim();\n    this.privateKey = (process.env.REACT_APP_GOOGLE_PRIVATE_KEY || '').trim();\n  }\n\n  async getCustomers(): Promise<CustomerData[]> {\n    // 本番環境では常にGoogle Sheets APIから最新データを取得\n    if (process.env.NODE_ENV === 'production' && this.spreadsheetId && this.apiKey) {\n      try {\n        console.log('Google Sheetsから最新データを取得中...');\n        const data = await this.fetchFromGoogleSheetsWithRetry();\n        // ローカルストレージに保存（同期のため）\n        this.saveLocalCustomers(data);\n        console.log('Google Sheetsから取得完了:', data.length, '件');\n        return data;\n      } catch (error) {\n        console.error('Google Sheets API エラー:', error);\n        // エラーの場合はローカルストレージから取得\n        const localData = this.getLocalCustomers();\n        if (localData.length > 0) {\n          console.log('エラーのためローカルストレージから取得:', localData.length, '件');\n          return localData;\n        }\n        console.log('ローカルストレージも空のため、空の配列を返します');\n        return [];\n      }\n    }\n    \n    // 開発環境でもGoogle Sheetsから取得\n    return await this.fetchFromGoogleSheetsWithRetry();\n  }\n\n  private async fetchFromGoogleSheetsWithRetry(): Promise<CustomerData[]> {\n    // API呼び出し間隔を制御\n    const timeSinceLastCall = Date.now() - this.lastApiCall;\n    if (timeSinceLastCall < this.MIN_API_INTERVAL) {\n      const waitTime = this.MIN_API_INTERVAL - timeSinceLastCall;\n      console.log(`${waitTime}ms 待機してからAPI呼び出し...`);\n      await this.sleep(waitTime);\n    }\n\n    for (let attempt = 1; attempt <= this.MAX_RETRIES; attempt++) {\n      try {\n        console.log(`Google Sheets API 呼び出し (試行 ${attempt}/${this.MAX_RETRIES})`);\n        this.lastApiCall = Date.now();\n        return await this.fetchFromGoogleSheets();\n      } catch (error: any) {\n        console.error(`試行 ${attempt} 失敗:`, error);\n        \n        // レート制限エラーの場合、待機時間を増やす\n        if (error.message.includes('429') || error.message.includes('RATE_LIMIT_EXCEEDED')) {\n          const delay = this.RETRY_DELAY * Math.pow(2, attempt - 1); // 指数バックオフ\n          console.log(`${delay}ms 待機してから再試行...`);\n          await this.sleep(delay);\n          continue;\n        }\n        \n        // 最後の試行でも失敗した場合、ローカルストレージから取得\n        if (attempt === this.MAX_RETRIES) {\n          console.log('Google Sheets API が利用できないため、ローカルストレージから取得します');\n          const localData = this.getLocalCustomers();\n          if (localData.length > 0) {\n            return localData;\n          }\n          // ローカルストレージも空の場合は空の配列を返す\n          return [];\n        }\n        \n        // その他のエラーは即座に失敗\n        throw error;\n      }\n    }\n    \n    throw new Error('最大リトライ回数に達しました');\n  }\n\n  private sleep(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  // Google API を初期化\n  private async initializeGapi(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      if (typeof window === 'undefined') {\n        reject(new Error('ブラウザ環境で実行してください'));\n        return;\n      }\n\n      // Google API スクリプトが既に読み込まれているかチェック\n      if (window.gapi) {\n        this.gapi = window.gapi;\n        resolve();\n        return;\n      }\n\n      // Google API スクリプトを動的に読み込み\n      const script = document.createElement('script');\n      script.src = 'https://apis.google.com/js/api.js';\n      script.onload = () => {\n        window.gapi.load('client', async () => {\n          try {\n            await window.gapi.client.init({\n              apiKey: this.apiKey,\n              discoveryDocs: ['https://sheets.googleapis.com/$discovery/rest?version=v4'],\n            });\n            this.gapi = window.gapi;\n            resolve();\n          } catch (error) {\n            reject(error);\n          }\n        });\n      };\n      script.onerror = () => reject(new Error('Google API スクリプトの読み込みに失敗しました'));\n      document.head.appendChild(script);\n    });\n  }\n\n  // サービスアカウント認証でJWTトークンを取得\n  private async getServiceAccountToken(): Promise<string> {\n    try {\n      const now = Math.floor(Date.now() / 1000);\n      const header = {\n        alg: 'RS256',\n        typ: 'JWT'\n      };\n\n      const payload = {\n        iss: this.clientEmail,\n        scope: 'https://www.googleapis.com/auth/spreadsheets',\n        aud: 'https://oauth2.googleapis.com/token',\n        iat: now,\n        exp: now + 3600, // 1時間有効\n        sub: this.clientEmail\n      };\n\n      // JWTトークンを生成（簡略化された実装）\n      const encodedHeader = btoa(JSON.stringify(header));\n      const encodedPayload = btoa(JSON.stringify(payload));\n      const signature = await this.signJWT(`${encodedHeader}.${encodedPayload}`);\n      \n      return `${encodedHeader}.${encodedPayload}.${signature}`;\n    } catch (error) {\n      console.error('JWTトークン生成エラー:', error);\n      throw error;\n    }\n  }\n\n  // JWT署名を生成（簡略化）\n  private async signJWT(data: string): Promise<string> {\n    // 実際の実装では、Web Crypto APIを使用してRS256署名を生成する必要があります\n    // ここでは簡略化のため、空の文字列を返します\n    console.warn('JWT署名の実装が必要です');\n    return '';\n  }\n\n  private async fetchFromGoogleSheets(): Promise<CustomerData[]> {\n    try {\n      console.log('Google Sheets API 設定:', {\n        spreadsheetId: this.spreadsheetId,\n        apiKey: this.apiKey ? '設定済み' : '未設定',\n        environment: process.env.NODE_ENV\n      });\n\n      // 一般公開されたスプレッドシートにAPIキーでアクセス\n      // まず、スプレッドシートの情報を取得してシート名を確認\n      const spreadsheetInfoUrl = `https://sheets.googleapis.com/v4/spreadsheets/${this.spreadsheetId.trim()}?key=${this.apiKey}`;\n      console.log('スプレッドシート情報取得URL:', spreadsheetInfoUrl);\n      \n      const infoResponse = await fetch(spreadsheetInfoUrl);\n      if (!infoResponse.ok) {\n        throw new Error(`Spreadsheet info request failed: ${infoResponse.status}`);\n      }\n      \n      const spreadsheetInfo = await infoResponse.json();\n      console.log('スプレッドシート情報:', spreadsheetInfo);\n      \n      // 「フォームの回答」シートを取得\n      const sheetName = 'フォームの回答';\n      console.log('使用するシート名:', sheetName);\n      \n      const url = `https://sheets.googleapis.com/v4/spreadsheets/${this.spreadsheetId.trim()}/values/${encodeURIComponent(sheetName)}?key=${this.apiKey}`;\n      console.log('API URL:', url);\n      \n      const response = await fetch(url);\n      \n      console.log('API レスポンス:', {\n        status: response.status,\n        statusText: response.statusText,\n        ok: response.ok\n      });\n      \n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('API エラーレスポンス:', errorText);\n        throw new Error(`HTTP error! status: ${response.status}, message: ${errorText}`);\n      }\n      \n      const data = await response.json();\n      console.log('取得したデータ:', data);\n      \n      const parsedData = this.parseSheetData(data.values || []);\n      console.log('解析されたデータ:', parsedData);\n      \n      return parsedData;\n    } catch (error) {\n      console.error('Google Sheets データ取得エラー:', error);\n      throw error;\n    }\n  }\n\n  private parseSheetData(values: string[][]): CustomerData[] {\n    if (values.length < 2) {\n      return [];\n    }\n\n    // ヘッダー行をスキップしてデータを解析\n    const headers = values[0];\n    const dataRows = values.slice(1);\n\n    console.log('ヘッダー:', headers);\n    console.log('データ行数:', dataRows.length);\n\n    return dataRows.map((row, index) => {\n      console.log(`行 ${index + 1}:`, row);\n      \n      // ヘッダーに基づいてデータをマッピング\n      const getValue = (headerName: string) => {\n        const headerIndex = headers.findIndex(h => h && h.toLowerCase().includes(headerName.toLowerCase()));\n        return headerIndex >= 0 ? (row[headerIndex] || '').trim() : '';\n      };\n\n      // フォーム回答の列構造に基づいてデータを解析\n      // フォーム回答の列順序: タイムスタンプ, お名前, ふりがな, メール, 電話, 住所, ペット名, 犬種, 年齢, 体重, 備考, 登録日, 最終来店\n      const customer = {\n        id: `C${String(index + 1).padStart(3, '0')}`, // 管理システム側で自動付与\n        name: row[1] || '', // お名前（B列）\n        furigana: row[2] || '', // ふりがな（C列）\n        email: row[3] || '', // メール（D列）\n        phone: row[4] || '', // 電話（E列）\n        address: row[5] || '', // 住所（F列）\n        petName: row[6] || '', // ペット名（G列）\n        petType: (row[7] || 'その他') as '犬' | '猫' | 'その他', // 犬種（H列）\n        breed: '', // 品種は削除\n        age: parseInt(row[8] || '0') || 0, // 年齢（I列）\n        weight: parseFloat(row[9] || '0') || 0, // 体重（J列）\n        imageUrl: '', // 画像URLは削除\n        notes: row[10] || '', // 備考（K列）\n        createdAt: row[11] || new Date().toISOString().split('T')[0], // 登録日（L列）\n        lastVisit: row[12] || '', // 最終来店（M列）\n        status: 'active' as 'active' | 'inactive' // デフォルトでアクティブ\n      };\n\n      console.log(`解析された顧客 ${index + 1}:`, customer);\n      return customer;\n    }).filter(customer => customer.name && customer.petName); // 名前とペット名があるもののみ\n  }\n\n  async getCustomerById(id: string): Promise<CustomerData | null> {\n    const customers = await this.getCustomers();\n    return customers.find(customer => customer.id === id) || null;\n  }\n\n  // ローカルストレージから顧客データを取得\n  private getLocalCustomers(): CustomerData[] {\n    try {\n      const stored = localStorage.getItem('かんりしすてむpreschool_customers');\n      if (stored) {\n        const data = JSON.parse(stored);\n        console.log('ローカルストレージから取得したデータ:', data);\n        return data;\n      }\n    } catch (error) {\n      console.error('ローカルストレージからのデータ取得エラー:', error);\n    }\n    return [];\n  }\n\n  // ローカルストレージに顧客データを保存\n  private saveLocalCustomers(customers: CustomerData[]): void {\n    try {\n      localStorage.setItem('かんりしすてむpreschool_customers', JSON.stringify(customers));\n      console.log('ローカルストレージに保存:', customers.length, '件');\n    } catch (error) {\n      console.error('ローカルストレージへの保存エラー:', error);\n    }\n  }\n\n  // ローカルストレージをクリア\n  public clearLocalData(): void {\n    try {\n      localStorage.removeItem('かんりしすてむpreschool_customers');\n      console.log('ローカルストレージをクリアしました');\n    } catch (error) {\n      console.error('ローカルストレージのクリアエラー:', error);\n    }\n  }\n\n  // 特定の顧客データを削除（ローカルストレージのみ）\n  public deleteCustomer(id: string): void {\n    try {\n      const customers = this.getLocalCustomers();\n      const updatedCustomers = customers.filter(customer => customer.id !== id);\n      this.saveLocalCustomers(updatedCustomers);\n      console.log(`顧客ID ${id} をローカルストレージから削除しました`);\n    } catch (error) {\n      console.error('顧客データの削除エラー:', error);\n    }\n  }\n\n  // 顧客データを更新（ローカルストレージとGoogle Sheets両方）\n  public async updateCustomer(updatedCustomer: CustomerData): Promise<void> {\n    try {\n      // ローカルストレージを更新\n      const customers = this.getLocalCustomers();\n      const customerIndex = customers.findIndex(c => c.id === updatedCustomer.id);\n      \n      if (customerIndex === -1) {\n        throw new Error('顧客が見つかりません');\n      }\n\n      customers[customerIndex] = updatedCustomer;\n      this.saveLocalCustomers(customers);\n      console.log(`顧客ID ${updatedCustomer.id} をローカルストレージで更新しました`);\n\n      // 本番環境の場合、Google Sheetsも更新\n      if (process.env.NODE_ENV === 'production') {\n        await this.updateCustomerInSheets(updatedCustomer);\n      }\n    } catch (error) {\n      console.error('顧客データの更新エラー:', error);\n      throw error;\n    }\n  }\n\n  // Google Sheetsで顧客データを更新\n  private async updateCustomerInSheets(customer: CustomerData): Promise<void> {\n    try {\n      // 顧客データを取得して行番号を特定\n      const customers = await this.getCustomers();\n      const customerIndex = customers.findIndex(c => c.id === customer.id);\n      \n      if (customerIndex === -1) {\n        throw new Error('顧客が見つかりません');\n      }\n\n      // 行番号を計算（ヘッダー行を考慮して+2）\n      const rowNumber = customerIndex + 2;\n\n      // データをGoogle Sheetsの形式に変換（フォーム回答用）\n      const rowData = [\n        '', // タイムスタンプ（A列）- 更新時は空\n        customer.name, // お名前（B列）\n        customer.furigana || '', // ふりがな（C列）\n        customer.email, // メール（D列）\n        customer.phone, // 電話（E列）\n        customer.address, // 住所（F列）\n        customer.petName, // ペット名（G列）\n        customer.petType, // 犬種（H列）\n        customer.age, // 年齢（I列）\n        customer.weight, // 体重（J列）\n        customer.notes, // 備考（K列）\n        customer.createdAt, // 登録日（L列）\n        customer.lastVisit // 最終来店（M列）\n      ];\n\n      // 行を更新\n      const requestBody = {\n        values: [rowData]\n      };\n\n      const response = await fetch(\n        `https://sheets.googleapis.com/v4/spreadsheets/${this.spreadsheetId}/values/A${rowNumber}:M${rowNumber}?valueInputOption=RAW&key=${this.apiKey}`,\n        {\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify(requestBody)\n        }\n      );\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(`Google Sheets API エラー: ${response.status} - ${JSON.stringify(errorData)}`);\n      }\n\n      console.log(`顧客 ${customer.id} をGoogle Sheetsで更新しました`);\n    } catch (error) {\n      console.error('Google Sheetsでの更新に失敗しました:', error);\n      throw error;\n    }\n  }\n\n  // Google Sheetsから顧客を削除（fetch APIを使用）\n  public async deleteCustomerFromSheets(id: string): Promise<void> {\n    try {\n      // 顧客データを取得して行番号を特定\n      const customers = await this.getCustomers();\n      const customerIndex = customers.findIndex(c => c.id === id);\n      \n      if (customerIndex === -1) {\n        throw new Error('顧客が見つかりません');\n      }\n\n      // 行番号を計算（ヘッダー行を考慮して+2）\n      const rowNumber = customerIndex + 2;\n\n      // サービスアカウント認証でJWTトークンを取得\n      const token = await this.getServiceAccountToken();\n      \n      // アクセストークンを取得\n      const accessToken = await this.getAccessToken(token);\n\n      // 行を削除\n      const requestBody = {\n        requests: [{\n          deleteDimension: {\n            range: {\n              sheetId: 0,\n              dimension: 'ROWS',\n              startIndex: rowNumber - 1,\n              endIndex: rowNumber\n            }\n          }\n        }]\n      };\n\n      const response = await fetch(\n        `https://sheets.googleapis.com/v4/spreadsheets/${this.spreadsheetId}:batchUpdate?key=${this.apiKey}`,\n        {\n          method: 'POST',\n          headers: {\n            'Authorization': `Bearer ${accessToken}`,\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify(requestBody)\n        }\n      );\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(`Google Sheets API エラー: ${response.status} - ${JSON.stringify(errorData)}`);\n      }\n\n      console.log(`顧客 ${id} をGoogle Sheetsから削除しました`);\n    } catch (error) {\n      console.error('Google Sheetsからの削除に失敗しました:', error);\n      throw error;\n    }\n  }\n\n  // アクセストークンを取得\n  private async getAccessToken(jwtToken: string): Promise<string> {\n    const response = await fetch('https://oauth2.googleapis.com/token', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      body: new URLSearchParams({\n        grant_type: 'urn:ietf:params:oauth:grant-type:jwt-bearer',\n        assertion: jwtToken\n      })\n    });\n\n    if (!response.ok) {\n      throw new Error(`アクセストークン取得エラー: ${response.status}`);\n    }\n\n    const data = await response.json();\n    return data.access_token;\n  }\n\n  // 顧客を完全に削除（現在はローカルストレージのみ）\n  public async deleteCustomerCompletely(id: string): Promise<void> {\n    try {\n      // ローカルストレージから削除\n      this.deleteCustomer(id);\n      \n      // TODO: Google Sheetsからの削除は認証の問題で一時的に無効化\n      // サービスアカウント認証の実装が必要\n      console.log(`顧客 ${id} をローカルストレージから削除しました`);\n      console.log('注意: Google Sheetsからの削除は現在無効です');\n      \n      // 将来的にGoogle Sheetsからも削除する場合のコード\n      // if (process.env.NODE_ENV === 'production') {\n      //   await this.deleteCustomerFromSheets(id);\n      // }\n    } catch (error) {\n      console.error('顧客の削除に失敗しました:', error);\n      throw error;\n    }\n  }\n\n  // スプレッドシートからデータを再取得してローカルに保存\n  public async refreshFromSheets(): Promise<CustomerData[]> {\n    console.log('スプレッドシートからデータを再取得します...');\n    return await this.getCustomers();\n  }\n\n}\n\nexport default GoogleSheetsService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}